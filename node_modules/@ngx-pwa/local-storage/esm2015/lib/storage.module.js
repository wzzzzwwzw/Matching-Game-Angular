import { NgModule } from '@angular/core';
import { LS_PREFIX, IDB_DB_NAME, IDB_STORE_NAME, IDB_DB_VERSION, IDB_NO_WRAP } from './tokens';
/**
 * This module does not contain anything, it's only useful to provide options via `.forRoot()`.
 */
export class StorageModule {
    /**
     * Only useful to provide options, otherwise it does nothing.
     * **Must be used at initialization, ie. in `AppModule`, and must not be loaded again in another module.**
     *
     * @example
     * NgModule({
     *   imports: [StorageModule.forRoot({
     *     LSPrefix: 'custom_',
     *   })]
     * })
     * export class AppModule
     */
    static forRoot(config) {
        return {
            ngModule: StorageModule,
            providers: [
                config.LSPrefix ? { provide: LS_PREFIX, useValue: config.LSPrefix } : [],
                config.IDBDBName ? { provide: IDB_DB_NAME, useValue: config.IDBDBName } : [],
                config.IDBStoreName ? { provide: IDB_STORE_NAME, useValue: config.IDBStoreName } : [],
                config.IDBDBVersion ? { provide: IDB_DB_VERSION, useValue: config.IDBDBVersion } : [],
                (config.IDBNoWrap === false) ? { provide: IDB_NO_WRAP, useValue: config.IDBNoWrap } : [],
            ],
        };
    }
}
StorageModule.decorators = [
    { type: NgModule }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXB3YS9sb2NhbC1zdG9yYWdlL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zdG9yYWdlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLFdBQVcsRUFBaUIsTUFBTSxVQUFVLENBQUM7QUFFOUc7O0dBRUc7QUFFSCxNQUFNLE9BQU8sYUFBYTtJQUV4Qjs7Ozs7Ozs7Ozs7T0FXRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBcUI7UUFDbEMsT0FBTztZQUNMLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDVCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDeEUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNyRixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDckYsQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTthQUN6RjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUExQkYsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IExTX1BSRUZJWCwgSURCX0RCX05BTUUsIElEQl9TVE9SRV9OQU1FLCBJREJfREJfVkVSU0lPTiwgSURCX05PX1dSQVAsIFN0b3JhZ2VDb25maWcgfSBmcm9tICcuL3Rva2Vucyc7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZG9lcyBub3QgY29udGFpbiBhbnl0aGluZywgaXQncyBvbmx5IHVzZWZ1bCB0byBwcm92aWRlIG9wdGlvbnMgdmlhIGAuZm9yUm9vdCgpYC5cbiAqL1xuQE5nTW9kdWxlKClcbmV4cG9ydCBjbGFzcyBTdG9yYWdlTW9kdWxlIHtcblxuICAvKipcbiAgICogT25seSB1c2VmdWwgdG8gcHJvdmlkZSBvcHRpb25zLCBvdGhlcndpc2UgaXQgZG9lcyBub3RoaW5nLlxuICAgKiAqKk11c3QgYmUgdXNlZCBhdCBpbml0aWFsaXphdGlvbiwgaWUuIGluIGBBcHBNb2R1bGVgLCBhbmQgbXVzdCBub3QgYmUgbG9hZGVkIGFnYWluIGluIGFub3RoZXIgbW9kdWxlLioqXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIE5nTW9kdWxlKHtcbiAgICogICBpbXBvcnRzOiBbU3RvcmFnZU1vZHVsZS5mb3JSb290KHtcbiAgICogICAgIExTUHJlZml4OiAnY3VzdG9tXycsXG4gICAqICAgfSldXG4gICAqIH0pXG4gICAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGVcbiAgICovXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZzogU3RvcmFnZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U3RvcmFnZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogU3RvcmFnZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBjb25maWcuTFNQcmVmaXggPyB7IHByb3ZpZGU6IExTX1BSRUZJWCwgdXNlVmFsdWU6IGNvbmZpZy5MU1ByZWZpeCB9IDogW10sXG4gICAgICAgIGNvbmZpZy5JREJEQk5hbWUgPyB7IHByb3ZpZGU6IElEQl9EQl9OQU1FLCB1c2VWYWx1ZTogY29uZmlnLklEQkRCTmFtZSB9IDogW10sXG4gICAgICAgIGNvbmZpZy5JREJTdG9yZU5hbWUgPyB7IHByb3ZpZGU6IElEQl9TVE9SRV9OQU1FLCB1c2VWYWx1ZTogY29uZmlnLklEQlN0b3JlTmFtZSB9IDogW10sXG4gICAgICAgIGNvbmZpZy5JREJEQlZlcnNpb24gPyB7IHByb3ZpZGU6IElEQl9EQl9WRVJTSU9OLCB1c2VWYWx1ZTogY29uZmlnLklEQkRCVmVyc2lvbiB9IDogW10sXG4gICAgICAgIChjb25maWcuSURCTm9XcmFwID09PSBmYWxzZSkgPyB7IHByb3ZpZGU6IElEQl9OT19XUkFQLCB1c2VWYWx1ZTogY29uZmlnLklEQk5vV3JhcCB9IDogW10sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxufVxuIl19