{"version":3,"file":"storage-map.service.d.ts","sources":["storage-map.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable, OperatorFunction, ReplaySubject } from 'rxjs';\nimport { JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf } from '../validation/json-schema';\nimport { JSONValidator } from '../validation/json-validator';\nimport { LocalDatabase } from '../databases/local-database';\nexport declare class StorageMap {\n    protected database: LocalDatabase;\n    protected jsonValidator: JSONValidator;\n    protected LSPrefix: string;\n    protected notifiers: Map<string, ReplaySubject<unknown>>;\n    /**\n     * Constructor params are provided by Angular (but can also be passed manually in tests)\n     * @param database Storage to use\n     * @param jsonValidator Validator service\n     * @param LSPrefix Prefix for `localStorage` keys to avoid collision for multiple apps on the same subdomain or for interoperability\n     */\n    constructor(database: LocalDatabase, jsonValidator?: JSONValidator, LSPrefix?: string);\n    /**\n     * **Number of items** in storage, wrapped in an `Observable`.\n     *\n     * @example\n     * this.storageMap.size.subscribe((size) => {\n     *   console.log(size);\n     * });\n     */\n    get size(): Observable<number>;\n    /**\n     * Tells you which storage engine is used. *Only useful for interoperability.*\n     * Note that due to some browsers issues in some special contexts\n     * (Firefox private mode and Safari cross-origin iframes),\n     * **this information may be wrong at initialization,**\n     * as the storage could fallback from `indexedDB` to `localStorage`\n     * only after a first read or write operation.\n     * @returns Storage engine used\n     *\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/INTEROPERABILITY.md}\n     *\n     * @example\n     * if (this.storageMap.backingEngine === 'indexedDB') {}\n     */\n    get backingEngine(): 'indexedDB' | 'localStorage' | 'memory' | 'unknown';\n    /**\n     * Info about `indexedDB` database. *Only useful for interoperability.*\n     * @returns `indexedDB` database name, store name and database version.\n     * **Values will be empty if the storage is not `indexedDB`,**\n     * **so it should be used after an engine check**.\n     *\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/INTEROPERABILITY.md}\n     *\n     * @example\n     * if (this.storageMap.backingEngine === 'indexedDB') {\n     *   const { database, store, version } = this.storageMap.backingStore;\n     * }\n     */\n    get backingStore(): {\n        database: string;\n        store: string;\n        version: number;\n    };\n    /**\n     * Info about `localStorage` fallback storage. *Only useful for interoperability.*\n     * @returns `localStorage` prefix.\n     * **Values will be empty if the storage is not `localStorage`,**\n     * **so it should be used after an engine check**.\n     *\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/INTEROPERABILITY.md}\n     *\n     * @example\n     * if (this.storageMap.backingEngine === 'localStorage') {\n     *   const { prefix } = this.storageMap.fallbackBackingStore;\n     * }\n     */\n    get fallbackBackingStore(): {\n        prefix: string;\n    };\n    /**\n     * Get an item value in storage.\n     * The signature has many overloads due to validation, **please refer to the documentation.**\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     * @param key The item's key\n     * @param schema Optional JSON schema to validate the data\n     * @returns The item's value if the key exists, `undefined` otherwise, wrapped in a RxJS `Observable`\n     *\n     * @example\n     * this.storageMap.get('key', { type: 'string' }).subscribe((result) => {\n     *   result; // string or undefined\n     * });\n     *\n     * @example\n     * interface User {\n     *   firstName: string;\n     *   lastName?: string;\n     * }\n     *\n     * const schema = {\n     *   type: 'object',\n     *   properties: {\n     *     firstName: { type: 'string' },\n     *     lastName: { type: 'string' },\n     *   },\n     *   required: ['firstName']\n     * };\n     *\n     * this.storageMap.get<User>('user', schema).subscribe((user) => {\n     *   if (user) {\n     *     user.firstName;\n     *   }\n     * });\n     */\n    get(key: string): Observable<unknown>;\n    get<T extends string = string>(key: string, schema: JSONSchemaString): Observable<T | undefined>;\n    get<T extends number = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<T | undefined>;\n    get<T extends boolean = boolean>(key: string, schema: JSONSchemaBoolean): Observable<T | undefined>;\n    get<T extends readonly string[] = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<T | undefined>;\n    get<T extends readonly number[] = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<T | undefined>;\n    get<T extends readonly boolean[] = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<T | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n    /**\n     * @deprecated A cast is required here, otherwise the return will be `unknown` despite a JSON schema was provided.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get(key: string, schema: JSONSchema): Observable<unknown | undefined>;\n    get<T>(key: string, schema: JSONSchema): Observable<T | undefined>;\n    /**\n     * @deprecated The cast is useless here: as no JSON schema was provided for validation, the result will still be `unknown`.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    get<T>(key: string, schema?: JSONSchema): Observable<unknown>;\n    /**\n     * Set an item in storage.\n     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n     * @param key The item's key\n     * @param data The item's value\n     * @param schema Optional JSON schema to validate the data\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.storageMap.set('key', 'value').subscribe(() => {});\n     */\n    set(key: string, data: unknown, schema?: JSONSchema): Observable<undefined>;\n    /**\n     * Delete an item in storage\n     * @param key The item's key\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.storageMap.delete('key').subscribe(() => {});\n     */\n    delete(key: string): Observable<undefined>;\n    /**\n     * Delete all items in storage\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.storageMap.clear().subscribe(() => {});\n     */\n    clear(): Observable<undefined>;\n    /**\n     * Get all keys stored in storage. Note **this is an *iterating* `Observable`**:\n     * * if there is no key, the `next` callback will not be invoked,\n     * * if you need to wait the whole operation to end, be sure to act in the `complete` callback,\n     * as this `Observable` can emit several values and so will invoke the `next` callback several times.\n     * @returns A list of the keys wrapped in a RxJS `Observable`\n     *\n     * @example\n     * this.storageMap.keys().subscribe({\n     *   next: (key) => { console.log(key); },\n     *   complete: () => { console.log('Done'); },\n     * });\n     */\n    keys(): Observable<string>;\n    /**\n     * Tells if a key exists in storage\n     * @returns A RxJS `Observable` telling if the key exists\n     *\n     * @example\n     * this.storageMap.has('key').subscribe((hasKey) => {\n     *   if (hasKey) {}\n     * });\n     */\n    has(key: string): Observable<boolean>;\n    /**\n     * Watch an item value in storage.\n     * **Note only changes done via this lib will be watched**, external changes in storage can't be detected.\n     * The signature has many overloads due to validation, **please refer to the documentation.**\n     * @see https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md\n     * @param key The item's key to watch\n     * @param schema Optional JSON schema to validate the initial value\n     * @returns An infinite `Observable` giving the current value\n     */\n    watch(key: string): Observable<unknown>;\n    watch<T extends string = string>(key: string, schema: JSONSchemaString): Observable<T | undefined>;\n    watch<T extends number = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<T | undefined>;\n    watch<T extends boolean = boolean>(key: string, schema: JSONSchemaBoolean): Observable<T | undefined>;\n    watch<T extends readonly string[] = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<T | undefined>;\n    watch<T extends readonly number[] = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<T | undefined>;\n    watch<T extends readonly boolean[] = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<T | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T = string>(key: string, schema: JSONSchemaString): Observable<string | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | undefined>;\n    /**\n     * @deprecated The cast is useless here and doesn't match the JSON schema. Just remove the cast.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | undefined>;\n    /**\n     * @deprecated A cast is required here, otherwise the return will be `unknown` despite a JSON schema was provided.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch(key: string, schema: JSONSchema): Observable<unknown | undefined>;\n    watch<T>(key: string, schema: JSONSchema): Observable<T | undefined>;\n    /**\n     * @deprecated The cast is useless here: as no JSON schema was provided for validation, the result will still be `unknown`.\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     */\n    watch<T>(key: string, schema?: JSONSchema): Observable<unknown>;\n    /**\n     * Notify when a value changes\n     * @param key The item's key\n     * @param data The new value\n     */\n    protected notify(key: string, value: unknown): void;\n    /**\n     * RxJS operator to catch if `indexedDB` is broken\n     * @param operationCallback Callback with the operation to redo\n     */\n    protected catchIDBBroken<T>(operationCallback: () => Observable<T>): OperatorFunction<T, T>;\n}\n"]}