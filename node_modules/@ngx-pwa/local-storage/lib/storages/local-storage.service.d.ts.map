{"version":3,"file":"local-storage.service.d.ts","sources":["local-storage.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { JSONSchema, JSONSchemaBoolean, JSONSchemaInteger, JSONSchemaNumber, JSONSchemaString, JSONSchemaArrayOf } from '../validation/json-schema';\nimport { StorageMap } from './storage-map.service';\nexport declare class LocalStorage {\n    protected storageMap: StorageMap;\n    /**\n     * Number of items in storage wrapped in an `Observable`\n     *\n     * @example\n     * this.localStorage.length.subscribe((length) => {\n     *   console.log(length);\n     * });\n     */\n    get length(): Observable<number>;\n    constructor(storageMap: StorageMap);\n    /**\n     * Get an item value in storage.\n     * The signature has many overloads due to validation, **please refer to the documentation.**\n     * @see {@link https://github.com/cyrilletuzi/angular-async-local-storage/blob/main/docs/VALIDATION.md}\n     * @param key The item's key\n     * @param schema Optional JSON schema to validate the data.\n     * **Note you must pass the schema directly as the second argument.**\n     * **Passing the schema in an object `{ schema }` is deprecated and only here**\n     * **for backward compatibility: it will be removed in a future version.**\n     * @returns The item's value if the key exists, `null` otherwise, wrapped in a RxJS `Observable`\n     *\n     * @example\n     * this.localStorage.get('key', { type: 'string' }).subscribe((result) => {\n     *   result; // string or null\n     * });\n     *\n     * @example\n     * interface User {\n     *   firstName: string;\n     *   lastName?: string;\n     * }\n     *\n     * const schema = {\n     *   type: 'object',\n     *   properties: {\n     *     firstName: { type: 'string' },\n     *     lastName: { type: 'string' },\n     *   },\n     *   required: ['firstName']\n     * };\n     *\n     * this.localStorage.get<User>('user', schema).subscribe((user) => {\n     *   if (user) {\n     *     user.firstName;\n     *   }\n     * });\n     */\n    getItem<T = string>(key: string, schema: JSONSchemaString): Observable<string | null>;\n    getItem<T = number>(key: string, schema: JSONSchemaInteger | JSONSchemaNumber): Observable<number | null>;\n    getItem<T = boolean>(key: string, schema: JSONSchemaBoolean): Observable<boolean | null>;\n    getItem<T = string[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaString>): Observable<string[] | null>;\n    getItem<T = number[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaInteger | JSONSchemaNumber>): Observable<number[] | null>;\n    getItem<T = boolean[]>(key: string, schema: JSONSchemaArrayOf<JSONSchemaBoolean>): Observable<boolean[] | null>;\n    getItem<T = unknown>(key: string, schema: JSONSchema | {\n        schema: JSONSchema;\n    }): Observable<T | null>;\n    getItem<T = unknown>(key: string, schema?: JSONSchema): Observable<unknown>;\n    /**\n     * Set an item in storage.\n     * Note that setting `null` or `undefined` will remove the item to avoid some browsers issues.\n     * @param key The item's key\n     * @param data The item's value\n     * @param schema Optional JSON schema to validate the data\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.localStorage.set('key', 'value').subscribe(() => {});\n     */\n    setItem(key: string, data: unknown, schema?: JSONSchema): Observable<boolean>;\n    /**\n     * Delete an item in storage\n     * @param key The item's key\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.localStorage.delete('key').subscribe(() => {});\n     */\n    removeItem(key: string): Observable<boolean>;\n    /**\n     * Delete all items in storage\n     * @returns A RxJS `Observable` to wait the end of the operation\n     *\n     * @example\n     * this.localStorage.clear().subscribe(() => {});\n     */\n    clear(): Observable<boolean>;\n}\n"]}